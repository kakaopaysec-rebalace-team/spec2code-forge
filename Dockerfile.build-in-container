# AI Asset Rebalancing System - In-Container Build Dockerfile
# 완전히 새로운 접근: 컨테이너 내부에서 직접 프론트엔드 빌드

FROM node:18-alpine AS frontend-builder

# Working directory for frontend build
WORKDIR /frontend-build

# Copy package files
COPY package*.json ./
COPY tsconfig*.json ./
COPY vite.config.ts ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY components.json ./
COPY index.html ./

# Install frontend dependencies
RUN npm ci

# Copy source code
COPY src/ ./src/
COPY public/ ./public/

# Build frontend
RUN npm run build

# Verify build output
RUN ls -la dist/ && echo "Build files count: $(find dist -type f | wc -l)"

# Python backend stage
FROM python:3.11-slim

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Working directory
WORKDIR /app

# Install Python dependencies
COPY backend/requirements.txt ./backend/
RUN pip install --upgrade pip && \
    pip install --no-cache-dir --timeout 60 --retries 3 \
    --index-url https://pypi.org/simple/ \
    --trusted-host pypi.org \
    --trusted-host pypi.python.org \
    --trusted-host files.pythonhosted.org \
    -r backend/requirements.txt

# Copy backend code
COPY backend/ ./backend/

# Copy built frontend from previous stage
COPY --from=frontend-builder /frontend-build/dist ./frontend/dist/

# Verify frontend copy
RUN ls -la /app/frontend/dist/ && echo "Frontend files: $(find /app/frontend/dist -type f | wc -l)"

# Create directories
RUN mkdir -p /app/logs /app/data && \
    chmod 755 /app/logs /app/data

# Environment
ENV PYTHONPATH=/app
ENV HOST=0.0.0.0
ENV PORT=8000

# User setup
RUN groupadd -r appuser && \
    useradd -r -g appuser -d /app -s /bin/bash appuser && \
    chown -R appuser:appuser /app

USER appuser

# Port
EXPOSE 8000

# Command
CMD ["python", "-m", "uvicorn", "backend.app:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]