#!/bin/bash

echo "🐳 Docker 환경 업데이트 문제 해결 가이드"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

echo "📋 체크리스트:"

echo ""
echo "1. 📥 Git Pull 확인"
echo "   - 서버에서 다음 명령어 실행:"
echo "     git log --oneline -5"
echo "     git status"
echo ""

echo "2. 🐳 Docker 캐시 완전 삭제"
echo "   - 기존 이미지와 컨테이너 삭제:"
echo "     docker stop \$(docker ps -aq)"
echo "     docker rm \$(docker ps -aq)"
echo "     docker rmi \$(docker images -q)"
echo "     docker system prune -af --volumes"
echo ""

echo "3. 🔨 Docker Build 옵션"
echo "   - 캐시 사용 안함으로 빌드:"
echo "     docker build --no-cache -t your-app-name ."
echo "   - 또는 BuildKit 사용:"
echo "     DOCKER_BUILDKIT=1 docker build --no-cache -t your-app-name ."
echo ""

echo "4. 📁 .dockerignore 확인"
echo "   - node_modules, .git, *.log 등이 제외되는지 확인"
echo "   - 중요한 소스 파일이 무시되지 않는지 확인"
echo ""

echo "5. 🔄 Multi-stage Build 캐시"
echo "   - 각 단계별로 캐시가 올바른지 확인"
echo "   - 의존성 파일(package.json, requirements.txt) 변경 시기 확인"
echo ""

echo "6. 🌐 브라우저 캐시"
echo "   - 브라우저에서 강력 새로고침: Ctrl+Shift+R (또는 Cmd+Shift+R)"
echo "   - 개발자도구에서 '네트워크' 탭에서 'Disable cache' 체크"
echo ""

echo "7. 📦 Node.js 빌드 캐시"
echo "   - 프론트엔드 빌드 캐시 삭제:"
echo "     rm -rf node_modules/.cache"
echo "     rm -rf .next (Next.js인 경우)"
echo "     rm -rf dist"
echo ""

echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
echo ""
echo "🔧 빠른 해결 명령어 순서:"
echo "1. docker stop \$(docker ps -aq) 2>/dev/null"
echo "2. docker system prune -af --volumes"
echo "3. git pull origin main"
echo "4. docker build --no-cache -t your-app ."
echo "5. docker run -p 8080:8080 your-app"
echo ""

echo "💡 추가 확인 사항:"
echo "- Docker 컨테이너 내부 파일이 실제로 업데이트되었는지:"
echo "  docker exec -it container_name ls -la /app/src/pages/"
echo ""
echo "- 컨테이너 로그 확인:"
echo "  docker logs container_name"
echo ""
echo "- 포트 매핑 확인:"
echo "  docker ps"