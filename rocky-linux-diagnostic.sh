#!/bin/bash

# Rocky Linux ÏßÑÎã® Î∞è Î¨∏Ï†ú Ìï¥Í≤∞ Ïä§ÌÅ¨Î¶ΩÌä∏
# Database AI ÏãúÏä§ÌÖú Ï†ÑÏö©

echo "üêß Rocky Linux Database AI ÏãúÏä§ÌÖú ÏßÑÎã®"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# 1. ÏãúÏä§ÌÖú ÌôòÍ≤Ω ÏßÑÎã®
echo "1Ô∏è‚É£ ÏãúÏä§ÌÖú ÌôòÍ≤Ω:"
echo "   OS: $(cat /etc/redhat-release 2>/dev/null || cat /etc/os-release | grep PRETTY_NAME | cut -d'=' -f2 | tr -d '\"')"
echo "   Ïª§ÎÑê: $(uname -r)"
echo "   ÏïÑÌÇ§ÌÖçÏ≤ò: $(uname -m)"
echo "   Î©îÎ™®Î¶¨: $(free -h | grep Mem | awk '{print $2" Ï¥ù, "$3" ÏÇ¨Ïö©Ï§ë"}')"
echo "   ÎîîÏä§ÌÅ¨: $(df -h . | tail -1 | awk '{print $2" Ï¥ù, "$3" ÏÇ¨Ïö©Ï§ë, "$4" Ïó¨Ïú†"}')"

# 2. Python ÌôòÍ≤Ω ÏÉÅÏÑ∏ ÏßÑÎã®
echo ""
echo "2Ô∏è‚É£ Python ÌôòÍ≤Ω ÏÉÅÏÑ∏ ÏßÑÎã®:"

# Python Î≤ÑÏ†ÑÎì§ ÌôïÏù∏
for py_cmd in python3.11 python3.10 python3.9 python3.8 python3 python; do
    if command -v $py_cmd >/dev/null; then
        echo "   ‚úÖ $py_cmd: $($py_cmd --version 2>&1)"
    fi
done

# Í∞ÄÏÉÅÌôòÍ≤Ω ÏßÑÎã®
cd backend 2>/dev/null || { echo "‚ùå backend ÎîîÎ†âÌÜ†Î¶¨ ÏóÜÏùå"; exit 1; }

if [ -d "venv" ]; then
    echo "   ‚úÖ Í∞ÄÏÉÅÌôòÍ≤Ω: venv/ Ï°¥Ïû¨"
    if [ -f "venv/bin/activate" ]; then
        echo "   ‚úÖ ÌôúÏÑ±Ìôî Ïä§ÌÅ¨Î¶ΩÌä∏: Ï†ïÏÉÅ"
        source venv/bin/activate
        echo "   ‚úÖ Python (venv): $(python --version)"
        echo "   ‚úÖ pip (venv): $(pip --version | awk '{print $1, $2}')"
    else
        echo "   ‚ùå ÌôúÏÑ±Ìôî Ïä§ÌÅ¨Î¶ΩÌä∏: ÏóÜÏùå"
    fi
else
    echo "   ‚ùå Í∞ÄÏÉÅÌôòÍ≤Ω: ÏóÜÏùå"
fi

# 3. SQLite ÏÉÅÏÑ∏ ÏßÑÎã®
echo ""
echo "3Ô∏è‚É£ SQLite ÌôòÍ≤Ω ÏßÑÎã®:"

if command -v sqlite3 >/dev/null; then
    SQLITE_VERSION=$(sqlite3 --version | awk '{print $1}')
    echo "   ‚úÖ SQLite3: $SQLITE_VERSION"
    
    # SQLite Í∏∞Îä• ÌÖåÏä§Ìä∏
    TEST_DB="/tmp/test_sqlite_$$"
    if sqlite3 "$TEST_DB" "CREATE TABLE test(id INTEGER); INSERT INTO test VALUES(1); SELECT * FROM test;" >/dev/null 2>&1; then
        echo "   ‚úÖ SQLite Í∏∞Îä•: Ï†ïÏÉÅ"
        rm -f "$TEST_DB"
    else
        echo "   ‚ùå SQLite Í∏∞Îä•: Ïò§Î•ò"
    fi
else
    echo "   ‚ùå SQLite3: ÏÑ§ÏπòÎêòÏßÄ ÏïäÏùå"
    echo "      ÏÑ§Ïπò Î™ÖÎ†π: sudo dnf install sqlite sqlite-devel"
fi

# Python SQLite ÏßÄÏõê ÌôïÏù∏
python -c "
import sqlite3
import sys
print(f'   ‚úÖ Python SQLite: {sqlite3.sqlite_version}')
try:
    import aiosqlite
    print('   ‚úÖ aiosqlite: ÏÑ§ÏπòÎê®')
except ImportError:
    print('   ‚ùå aiosqlite: ÏóÜÏùå')
    sys.exit(1)
" 2>/dev/null || echo "   ‚ùå Python SQLite Î™®Îìà Ïò§Î•ò"

# 4. Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌååÏùº ÏÉÅÏÑ∏ ÏßÑÎã®
echo ""
echo "4Ô∏è‚É£ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌååÏùº ÏßÑÎã®:"

DB_FILES=("asset_rebalancing.db" "expert_strategies.db" "simulation_results.db")

for db in "${DB_FILES[@]}"; do
    if [ -f "$db" ]; then
        SIZE=$(stat -c%s "$db" 2>/dev/null || stat -f%z "$db" 2>/dev/null)
        PERMISSIONS=$(ls -la "$db" | awk '{print $1}')
        OWNER=$(ls -la "$db" | awk '{print $3":"$4}')
        MODIFIED=$(stat -c%y "$db" 2>/dev/null | awk '{print $1, $2}' | cut -c1-16)
        
        echo "   üìä $db:"
        echo "      ÌÅ¨Í∏∞: $SIZE bytes"
        echo "      Í∂åÌïú: $PERMISSIONS"
        echo "      ÏÜåÏú†Ïûê: $OWNER"
        echo "      ÏàòÏ†ïÏùº: $MODIFIED"
        
        # SQLite ÌååÏùº Î¨¥Í≤∞ÏÑ± Í≤ÄÏÇ¨
        if sqlite3 "$db" "PRAGMA integrity_check;" 2>/dev/null | grep -q "ok"; then
            echo "      ‚úÖ Î¨¥Í≤∞ÏÑ±: OK"
            
            # ÌÖåÏù¥Î∏î ÌôïÏù∏
            TABLES=$(sqlite3 "$db" ".tables" 2>/dev/null | wc -w)
            echo "      üìã ÌÖåÏù¥Î∏î Ïàò: $TABLES"
            
            # Ï£ºÏöî ÌÖåÏù¥Î∏î Î†àÏΩîÎìú Ïàò ÌôïÏù∏
            if [ "$db" = "asset_rebalancing.db" ]; then
                for table in users holdings; do
                    COUNT=$(sqlite3 "$db" "SELECT COUNT(*) FROM $table;" 2>/dev/null || echo "0")
                    echo "         $table: $COUNT rows"
                done
            elif [ "$db" = "expert_strategies.db" ]; then
                COUNT=$(sqlite3 "$db" "SELECT COUNT(*) FROM expert_strategies;" 2>/dev/null || echo "0")
                echo "         expert_strategies: $COUNT rows"
            fi
        else
            echo "      ‚ùå Î¨¥Í≤∞ÏÑ±: ÏÜêÏÉÅÎê®"
        fi
    else
        echo "   ‚ùå $db: ÌååÏùº ÏóÜÏùå"
    fi
done

# 5. ÎÑ§Ìä∏ÏõåÌÅ¨ Î∞è Ìè¨Ìä∏ ÏßÑÎã®
echo ""
echo "5Ô∏è‚É£ ÎÑ§Ìä∏ÏõåÌÅ¨ Î∞è Ìè¨Ìä∏:"

PORTS=(8000 8003 8080 3000)
for port in "${PORTS[@]}"; do
    if ss -tuln 2>/dev/null | grep -q ":$port "; then
        PROCESS=$(ss -tulpn 2>/dev/null | grep ":$port " | awk '{print $NF}' | head -1)
        echo "   ‚úÖ Ìè¨Ìä∏ $port: ÏÇ¨Ïö© Ï§ë ($PROCESS)"
    else
        echo "   ‚ùå Ìè¨Ìä∏ $port: ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÏùå"
    fi
done

# 6. ÏÑúÎπÑÏä§ ÌîÑÎ°úÏÑ∏Ïä§ ÏßÑÎã®
echo ""
echo "6Ô∏è‚É£ ÏÑúÎπÑÏä§ ÌîÑÎ°úÏÑ∏Ïä§:"

# Python ÌîÑÎ°úÏÑ∏Ïä§
PYTHON_PROCS=$(pgrep -f "python.*app\\.py\\|uvicorn\\|start_backend" | wc -l)
echo "   Î∞±ÏóîÎìú (Python): $PYTHON_PROCS Í∞ú ÌîÑÎ°úÏÑ∏Ïä§"
if [ "$PYTHON_PROCS" -gt 0 ]; then
    pgrep -f "python.*app\\.py\\|uvicorn\\|start_backend" | while read pid; do
        CMD=$(ps -p $pid -o cmd --no-headers 2>/dev/null | cut -c1-60)
        echo "     PID $pid: $CMD..."
    done
fi

# Node.js ÌîÑÎ°úÏÑ∏Ïä§
NODE_PROCS=$(pgrep -f "node.*vite\\|npm.*dev" | wc -l)
echo "   ÌîÑÎ°†Ìä∏ÏóîÎìú (Node): $NODE_PROCS Í∞ú ÌîÑÎ°úÏÑ∏Ïä§"

# 7. Î°úÍ∑∏ ÌååÏùº Î∂ÑÏÑù
echo ""
echo "7Ô∏è‚É£ Î°úÍ∑∏ ÌååÏùº Î∂ÑÏÑù:"

cd .. 2>/dev/null

LOG_FILES=("backend.log" "frontend.log")
for log in "${LOG_FILES[@]}"; do
    if [ -f "$log" ]; then
        SIZE=$(stat -c%s "$log" 2>/dev/null || stat -f%z "$log" 2>/dev/null)
        LINES=$(wc -l < "$log" 2>/dev/null)
        echo "   üìÑ $log: $SIZE bytes, $LINES Ï§Ñ"
        
        # ÏµúÍ∑º ÏóêÎü¨ ÌôïÏù∏
        RECENT_ERRORS=$(tail -20 "$log" 2>/dev/null | grep -i "error\\|exception\\|failed\\|traceback" | wc -l)
        if [ "$RECENT_ERRORS" -gt 0 ]; then
            echo "      ‚ö†Ô∏è ÏµúÍ∑º ÏóêÎü¨ $RECENT_ERRORS Í±¥:"
            tail -20 "$log" 2>/dev/null | grep -i "error\\|exception\\|failed" | tail -3 | while read line; do
                echo "        $(echo "$line" | cut -c1-70)..."
            done
        else
            echo "      ‚úÖ ÏµúÍ∑º ÏóêÎü¨ ÏóÜÏùå"
        fi
    else
        echo "   ‚ùå $log: ÏóÜÏùå"
    fi
done

# 8. Database AI Engine Í∏∞Îä• ÌÖåÏä§Ìä∏
echo ""
echo "8Ô∏è‚É£ Database AI Engine Í∏∞Îä• ÌÖåÏä§Ìä∏:"

cd backend 2>/dev/null
source venv/bin/activate 2>/dev/null

python -c "
import asyncio
import sys
import traceback

async def comprehensive_test():
    try:
        print('   üß† Database AI Engine Î°úÎìú Ï§ë...')
        
        from database_ai_engine import get_database_ai_engine
        db_ai = await get_database_ai_engine()
        
        print('   ‚úÖ Database AI Engine Î°úÎìú ÏÑ±Í≥µ')
        
        # Ï†ÑÎûµ ÏÉùÏÑ± ÌÖåÏä§Ìä∏
        print('   üéØ Ï†ÑÎûµ ÏÉùÏÑ± ÌÖåÏä§Ìä∏ Ï§ë...')
        
        test_profiles = [
            {'risk_tolerance': 'conservative', 'investment_goal': 'income'},
            {'risk_tolerance': 'moderate', 'investment_goal': 'wealth_building'},
            {'risk_tolerance': 'aggressive', 'investment_goal': 'growth'}
        ]
        
        for i, profile in enumerate(test_profiles, 1):
            try:
                result = await db_ai.generate_intelligent_strategy(profile)
                allocation_count = len(result['portfolio_allocation'])
                confidence = result['confidence_score']
                sources = len(result['strategy_sources'])
                
                print(f'   ‚úÖ ÌÖåÏä§Ìä∏ {i}: {allocation_count}Í∞ú ÏûêÏÇ∞, Ïã†Î¢∞ÎèÑ {confidence:.3f}, {sources}Í∞ú Ï†ÑÎûµ ÏÜåÏä§')
                
            except Exception as e:
                print(f'   ‚ùå ÌÖåÏä§Ìä∏ {i} Ïã§Ìå®: {e}')
                return False
        
        return True
        
    except Exception as e:
        print(f'   üí• Database AI ÌÖåÏä§Ìä∏ Ïã§Ìå®: {e}')
        traceback.print_exc()
        return False

result = asyncio.run(comprehensive_test())
if result:
    print('   üéâ Î™®Îì† Database AI ÌÖåÏä§Ìä∏ ÌÜµÍ≥º!')
else:
    print('   ‚ùå Database AI ÌÖåÏä§Ìä∏ Ïã§Ìå®')
    exit(1)
" || echo "   ‚ùå Database AI Engine ÌÖåÏä§Ìä∏ Ïã§Ìå®"

# 9. API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏
echo ""
echo "9Ô∏è‚É£ API ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏:"

cd .. 2>/dev/null

# Í∏∞Î≥∏ Ìó¨Ïä§Ï≤¥ÌÅ¨
if curl -s --connect-timeout 5 "http://localhost:8003/health" >/dev/null; then
    echo "   ‚úÖ Ìó¨Ïä§Ï≤¥ÌÅ¨: Ï†ïÏÉÅ"
else
    echo "   ‚ùå Ìó¨Ïä§Ï≤¥ÌÅ¨: Ïã§Ìå®"
fi

# Database AI ÏóîÎìúÌè¨Ïù∏Ìä∏ ÌÖåÏä§Ìä∏
if curl -s --connect-timeout 5 -X POST "http://localhost:8003/database-ai/generate-strategy" \
   -H "Content-Type: application/json" \
   -d '{"user_profile":{"risk_tolerance":"moderate","investment_goal":"wealth_building"}}' >/dev/null; then
    echo "   ‚úÖ Database AI API: Ï†ïÏÉÅ"
else
    echo "   ‚ùå Database AI API: Ïã§Ìå®"
fi

# ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
if curl -s --connect-timeout 5 "http://localhost:8003/users/mock-user-001/holdings" >/dev/null; then
    echo "   ‚úÖ ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ API: Ï†ïÏÉÅ"
else
    echo "   ‚ùå ÏÇ¨Ïö©Ïûê Îç∞Ïù¥ÌÑ∞ API: Ïã§Ìå®"
fi

# 10. Rocky Linux ÌäπÌôî Î¨∏Ï†úÏ†ê Î∞è Ìï¥Í≤∞Î∞©Ïïà
echo ""
echo "üîü Rocky Linux ÌäπÌôî Ï≤¥ÌÅ¨:"

# SELinux ÏÉÅÌÉú
if command -v getenforce >/dev/null; then
    SELINUX_STATUS=$(getenforce)
    echo "   üõ°Ô∏è SELinux: $SELINUX_STATUS"
    if [ "$SELINUX_STATUS" = "Enforcing" ]; then
        echo "      ‚ö†Ô∏è SELinuxÍ∞Ä ÌôúÏÑ±ÌôîÎê® - ÌïÑÏöîÏãú Ïª®ÌÖçÏä§Ìä∏ ÏÑ§Ï†ï ÌïÑÏöî"
    fi
else
    echo "   üõ°Ô∏è SELinux: ÏóÜÏùå"
fi

# Î∞©ÌôîÎ≤Ω ÏÉÅÌÉú
if command -v firewall-cmd >/dev/null; then
    if systemctl is-active firewalld >/dev/null 2>&1; then
        echo "   üî• Î∞©ÌôîÎ≤Ω: ÌôúÏÑ±"
        for port in 8003 8080; do
            if firewall-cmd --query-port=${port}/tcp >/dev/null 2>&1; then
                echo "      ‚úÖ Ìè¨Ìä∏ $port: Ïó¥Î¶º"
            else
                echo "      ‚ùå Ìè¨Ìä∏ $port: Îã´Ìûò - Î∞©ÌôîÎ≤Ω ÏÑ§Ï†ï ÌïÑÏöî"
            fi
        done
    else
        echo "   üî• Î∞©ÌôîÎ≤Ω: ÎπÑÌôúÏÑ±"
    fi
fi

# DNF/YUM Ìå®ÌÇ§ÏßÄ Í¥ÄÎ¶¨Ïûê
if command -v dnf >/dev/null; then
    echo "   üì¶ Ìå®ÌÇ§ÏßÄ Í¥ÄÎ¶¨Ïûê: DNF"
elif command -v yum >/dev/null; then
    echo "   üì¶ Ìå®ÌÇ§ÏßÄ Í¥ÄÎ¶¨Ïûê: YUM"
fi

echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "üìä ÏßÑÎã® ÏôÑÎ£å ÏöîÏïΩ:"
echo ""

# Ï†ÑÏ≤¥Ï†ÅÏù∏ ÏÉÅÌÉú ÌèâÍ∞Ä
CRITICAL_ISSUES=0
WARNING_ISSUES=0

# Ï§ëÏöîÌïú Ï≤¥ÌÅ¨Ìè¨Ïù∏Ìä∏Îì§ Ïû¨Í≤ÄÏÇ¨
if ! command -v sqlite3 >/dev/null; then
    echo "‚ùå CRITICAL: SQLite3 ÏóÜÏùå"
    CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
fi

if [ ! -f "backend/asset_rebalancing.db" ] && [ ! -f "backend/expert_strategies.db" ]; then
    echo "‚ùå CRITICAL: ÌïµÏã¨ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÌååÏùº ÏóÜÏùå"
    CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
fi

if ! curl -s --connect-timeout 3 "http://localhost:8003/health" >/dev/null; then
    echo "‚ùå CRITICAL: Î∞±ÏóîÎìú ÏÑúÎ≤Ñ ÏùëÎãµ ÏóÜÏùå"
    CRITICAL_ISSUES=$((CRITICAL_ISSUES + 1))
fi

if ! curl -s --connect-timeout 3 -X POST "http://localhost:8003/database-ai/generate-strategy" \
   -H "Content-Type: application/json" \
   -d '{"user_profile":{"risk_tolerance":"moderate"}}' >/dev/null; then
    echo "‚ö†Ô∏è WARNING: Database AI API ÏùëÎãµ ÏóÜÏùå"
    WARNING_ISSUES=$((WARNING_ISSUES + 1))
fi

echo ""
if [ "$CRITICAL_ISSUES" -eq 0 ] && [ "$WARNING_ISSUES" -eq 0 ]; then
    echo "üéâ ÏãúÏä§ÌÖú ÏÉÅÌÉú: Ï†ïÏÉÅ - Database AI ÏãúÏä§ÌÖúÏù¥ ÏôÑÎ≤ΩÌïòÍ≤å ÏûëÎèô Ï§ë!"
    echo "üîó Ï†ëÏÜç: http://localhost:8080"
elif [ "$CRITICAL_ISSUES" -eq 0 ]; then
    echo "‚ö†Ô∏è ÏãúÏä§ÌÖú ÏÉÅÌÉú: Ï£ºÏùò - ÏùºÎ∂Ä Í∏∞Îä•Ïóê Î¨∏Ï†úÍ∞Ä ÏûàÏßÄÎßå ÏûëÎèô Í∞ÄÎä•"
    echo "üîß Ìï¥Í≤∞Î∞©Ïïà: ./rocky-linux-db-fix.sh Ïã§Ìñâ"
else
    echo "üí• ÏãúÏä§ÌÖú ÏÉÅÌÉú: Ïã¨Í∞Å - Ï¶âÏãú ÏàòÏ†ï ÌïÑÏöî"
    echo "üö® Ìï¥Í≤∞Î∞©Ïïà: ./rocky-linux-db-fix.sh Ïã§Ìñâ ÌõÑ Ïû¨ÏßÑÎã®"
fi

echo ""
echo "üõ†Ô∏è Î¨∏Ï†ú Ìï¥Í≤∞ ÎèÑÍµ¨:"
echo "   ‚Ä¢ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏàòÏ†ï: ./rocky-linux-db-fix.sh"
echo "   ‚Ä¢ ÏÑúÎπÑÏä§ Ïû¨ÏãúÏûë: ./restart.sh"
echo "   ‚Ä¢ ÏÉÅÌÉú ÌôïÏù∏: ./status.sh"
echo "   ‚Ä¢ Ï†ÑÏ≤¥ ÏßÑÎã®: ./rocky-linux-diagnostic.sh"