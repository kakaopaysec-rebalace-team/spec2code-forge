# Offline-capable Dockerfile for AI Asset Rebalancing System
# Repository: https://github.com/kakaopaysec-rebalace-team/spec2code-forge
# For environments with network restrictions or DNS issues

# Use minimal Python image without additional dependencies
FROM python:3.11-slim

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Set working directory
WORKDIR /app

# Copy offline wheels if available
COPY wheels/ /wheels/ 2>/dev/null || echo "No wheels directory found"

# Copy backend requirements first (for better caching)
COPY backend/requirements.txt ./backend/

# Install Python dependencies - try offline first, then minimal online
RUN pip install --upgrade pip && \
    if [ -d "/wheels" ] && [ "$(ls -A /wheels/)" ]; then \
        echo "🔄 오프라인 wheel 파일로 설치..."; \
        pip install --find-links /wheels/ --no-index -r backend/requirements.txt || \
        echo "⚠️ Wheel 설치 실패, 최소 패키지만 설치"; \
    fi && \
    pip install --no-cache-dir \
        fastapi==0.104.0 \
        uvicorn==0.24.0 \
        pydantic==2.5.0 \
        pandas==2.1.0 \
        numpy==1.24.0 \
        requests==2.31.0 \
        python-dotenv==1.0.0 || echo "기본 패키지 설치 시도 완료"

# Copy backend source code
COPY backend/ ./backend/

# Create frontend directory and handle frontend files
RUN mkdir -p ./frontend/dist/

# Create basic HTML (will be overwritten if dist exists)
RUN cat > ./frontend/dist/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>AI Asset Rebalancing System</title>
    <meta charset="utf-8">
    <style>
        body { font-family: Arial, sans-serif; margin: 40px; }
        .container { max-width: 600px; margin: 0 auto; }
        .status { padding: 20px; background: #f0f9ff; border-radius: 8px; }
    </style>
</head>
<body>
    <div class="container">
        <h1>🚀 AI Asset Rebalancing System</h1>
        <div class="status">
            <h2>✅ Backend API Available</h2>
            <p><strong>API Documentation:</strong> <a href="/docs">/docs</a></p>
            <p><strong>Health Check:</strong> <a href="/health">/health</a></p>
        </div>
    </div>
</body>
</html>
EOF

# Copy dist directory only if it exists
# First create empty dist to avoid COPY errors
RUN mkdir -p dist/
COPY dist/ ./frontend/dist/

# Create necessary directories
RUN mkdir -p /app/logs /app/data && \
    chmod 755 /app/logs /app/data

# Set final environment variables
ENV PYTHONPATH=/app
ENV HOST=0.0.0.0
ENV PORT=8000

# Create non-root user for security (without additional packages)
RUN groupadd -r appuser && \
    useradd -r -g appuser -d /app -s /bin/bash appuser && \
    chown -R appuser:appuser /app

# Switch to non-root user
USER appuser

# No health check (would require curl)
# HEALTHCHECK is removed to avoid network dependency

# Expose port
EXPOSE $PORT

# Start FastAPI server
CMD ["python", "-m", "uvicorn", "backend.app:app", "--host", "0.0.0.0", "--port", "8000", "--workers", "1"]