# Rocky Linux Database AI System Dockerfile
# API 키 불필요한 완전 자립형 포트폴리오 분석 시스템

FROM rockylinux/rockylinux:9

LABEL maintainer="Database AI Team"
LABEL version="1.0.0"
LABEL description="API 키 불필요한 자립형 Database AI 포트폴리오 분석 시스템"

# 환경 변수 설정
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV NODE_OPTIONS="--max-old-space-size=2048"
ENV PORT=8003
ENV FRONTEND_PORT=8080

# 작업 디렉토리 설정
WORKDIR /app

# Rocky Linux 패키지 업데이트 및 필수 도구 설치
RUN dnf update -y && \
    dnf install -y \
        python3 \
        python3-pip \
        python3-devel \
        sqlite \
        sqlite-devel \
        gcc \
        gcc-c++ \
        make \
        curl \
        wget \
        tar \
        git \
        procps-ng \
        lsof \
        net-tools && \
    dnf clean all

# Node.js 18 설치 (Rocky Linux 공식 저장소)
RUN dnf module install -y nodejs:18/common && \
    npm install -g npm@latest

# 시스템 검증
RUN python3 --version && \
    node --version && \
    npm --version && \
    sqlite3 --version

# 프로젝트 파일 복사
COPY package.json package-lock.json ./
COPY backend/requirements.txt ./backend/
COPY . .

# 권한 설정
RUN chmod +x *.sh && \
    chmod 755 /app

# Python 가상환경 생성 및 의존성 설치
RUN cd backend && \
    python3 -m venv venv && \
    source venv/bin/activate && \
    pip install --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    # Database AI Engine 필수 패키지
    pip install --no-cache-dir aiosqlite pandas numpy scikit-learn

# Node.js 의존성 설치 및 프론트엔드 빌드
RUN npm ci --only=production && \
    npm run build && \
    # 빌드 캐시 정리
    npm cache clean --force

# Rocky Linux 특화 데이터베이스 초기화
RUN cd backend && \
    source venv/bin/activate && \
    python3 -c "
import asyncio
import aiosqlite
import os
import json
import sqlite3

async def init_rocky_db():
    print('🐧 Rocky Linux Docker DB 초기화 중...')
    
    # 메인 데이터베이스
    async with aiosqlite.connect('asset_rebalancing.db') as db:
        await db.execute('PRAGMA journal_mode=WAL')
        await db.execute('PRAGMA synchronous=NORMAL')
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id TEXT PRIMARY KEY,
                name TEXT,
                email TEXT,
                phone TEXT,
                risk_tolerance TEXT,
                investment_goal TEXT,
                investment_horizon INTEGER,
                preferred_asset_types TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS holdings (
                holding_id TEXT PRIMARY KEY,
                user_id TEXT,
                symbol TEXT,
                name TEXT,
                quantity REAL,
                purchase_price REAL,
                current_price REAL,
                market_value REAL,
                weight REAL,
                sector TEXT,
                currency TEXT DEFAULT 'KRW',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')
        
        # Mock 사용자
        await db.execute('''
            INSERT OR REPLACE INTO users 
            (user_id, name, email, phone, risk_tolerance, investment_goal, investment_horizon)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', ('mock-user-001', '테스트 사용자', 'test@example.com', '010-1234-5678', 
              'moderate', 'wealth_building', 10))
        
        # Mock 보유종목
        holdings = [
            ('holding_1', 'mock-user-001', 'GOOGL', 'Alphabet Inc.', 119.64, 2300.0, 2450.8, 293213.712, 29.32, 'Technology'),
            ('holding_2', 'mock-user-001', 'MSFT', 'Microsoft Corporation', 385.92, 280.0, 310.5, 119828.16, 11.98, 'Technology'),
            ('holding_3', 'mock-user-001', 'AAPL', 'Apple Inc.', 300.0, 180.0, 195.5, 58650.0, 5.87, 'Technology')
        ]
        
        for holding in holdings:
            await db.execute('''
                INSERT OR REPLACE INTO holdings 
                (holding_id, user_id, symbol, name, quantity, purchase_price, 
                 current_price, market_value, weight, sector)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', holding)
        
        await db.commit()
    
    # 전문가 전략 데이터베이스
    async with aiosqlite.connect('expert_strategies.db') as db:
        await db.execute('PRAGMA journal_mode=WAL')
        await db.execute('PRAGMA synchronous=NORMAL')
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS expert_strategies (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                expert_name TEXT NOT NULL,
                strategy_name TEXT NOT NULL,
                investment_style TEXT NOT NULL,
                allocation_json TEXT NOT NULL,
                rationale TEXT,
                performance_metrics TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # 318개 전문가 전략 생성
        experts = ['워런 버핏', '피터 린치', '레이 달리오']
        styles = ['conservative', 'moderate', 'aggressive']
        
        for expert in experts:
            for style in styles:
                for i in range(106):
                    if style == 'conservative':
                        allocation = {'주식': 0.4, '채권': 0.4, '현금': 0.2}
                        strategy_name = f'{expert} 안정형 전략 #{i+1}'
                        rationale = f'{expert}의 안정적인 투자 철학 기반 포트폴리오'
                    elif style == 'moderate':  
                        allocation = {'주식': 0.6, '채권': 0.3, 'REITs': 0.1}
                        strategy_name = f'{expert} 균형형 전략 #{i+1}'
                        rationale = f'{expert}의 균형잡힌 투자 접근법 반영'
                    else:
                        allocation = {'기술주': 0.5, '성장주': 0.3, '신흥시장': 0.2}
                        strategy_name = f'{expert} 성장형 전략 #{i+1}'
                        rationale = f'{expert}의 적극적인 성장투자 철학 적용'
                    
                    perf_metrics = {'expected_return': 8+i*0.1, 'volatility': 12+i*0.05}
                    
                    await db.execute('''
                        INSERT INTO expert_strategies 
                        (expert_name, strategy_name, investment_style, allocation_json, rationale, performance_metrics)
                        VALUES (?, ?, ?, ?, ?, ?)
                    ''', (expert, strategy_name, style, json.dumps(allocation), 
                          rationale, json.dumps(perf_metrics)))
        
        await db.commit()
    
    print('✅ Rocky Linux Docker DB 초기화 완료 - 318개 전문가 전략 생성됨')

asyncio.run(init_rocky_db())
" && \
    chmod 664 *.db

# 포트 노출
EXPOSE 8003 8080

# 헬스체크 설정
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8003/health || exit 1

# 시작 스크립트 생성
RUN echo '#!/bin/bash' > /app/docker-start.sh && \
    echo 'set -e' >> /app/docker-start.sh && \
    echo 'echo "🐧 Rocky Linux Docker에서 Database AI 시스템 시작 중..."' >> /app/docker-start.sh && \
    echo 'echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"' >> /app/docker-start.sh && \
    echo '' >> /app/docker-start.sh && \
    echo '# 백엔드 서버 시작' >> /app/docker-start.sh && \
    echo 'echo "🐍 백엔드 서버 시작 중 (포트 8003)..."' >> /app/docker-start.sh && \
    echo 'cd /app/backend' >> /app/docker-start.sh && \
    echo 'source venv/bin/activate' >> /app/docker-start.sh && \
    echo 'python start_backend.py &' >> /app/docker-start.sh && \
    echo 'BACKEND_PID=$!' >> /app/docker-start.sh && \
    echo '' >> /app/docker-start.sh && \
    echo '# 프론트엔드 서버 시작' >> /app/docker-start.sh && \
    echo 'echo "⚛️ 프론트엔드 서버 시작 중 (포트 8080)..."' >> /app/docker-start.sh && \
    echo 'cd /app' >> /app/docker-start.sh && \
    echo 'npm run preview -- --host 0.0.0.0 --port 8080 &' >> /app/docker-start.sh && \
    echo 'FRONTEND_PID=$!' >> /app/docker-start.sh && \
    echo '' >> /app/docker-start.sh && \
    echo '# 서버 시작 대기' >> /app/docker-start.sh && \
    echo 'sleep 10' >> /app/docker-start.sh && \
    echo '' >> /app/docker-start.sh && \
    echo '# 상태 확인' >> /app/docker-start.sh && \
    echo 'echo "🔍 서비스 상태 확인 중..."' >> /app/docker-start.sh && \
    echo 'if curl -s http://localhost:8003/health >/dev/null; then' >> /app/docker-start.sh && \
    echo '    echo "✅ 백엔드 서버: 정상 작동"' >> /app/docker-start.sh && \
    echo 'else' >> /app/docker-start.sh && \
    echo '    echo "❌ 백엔드 서버: 오류"' >> /app/docker-start.sh && \
    echo 'fi' >> /app/docker-start.sh && \
    echo '' >> /app/docker-start.sh && \
    echo 'if curl -s http://localhost:8080 >/dev/null; then' >> /app/docker-start.sh && \
    echo '    echo "✅ 프론트엔드 서버: 정상 작동"' >> /app/docker-start.sh && \
    echo 'else' >> /app/docker-start.sh && \
    echo '    echo "❌ 프론트엔드 서버: 오류"' >> /app/docker-start.sh && \
    echo 'fi' >> /app/docker-start.sh && \
    echo '' >> /app/docker-start.sh && \
    echo '# Database AI 테스트' >> /app/docker-start.sh && \
    echo 'echo "🧠 Database AI 테스트 중..."' >> /app/docker-start.sh && \
    echo 'if curl -s -X POST "http://localhost:8003/database-ai/generate-strategy" -H "Content-Type: application/json" -d '"'"'{"user_profile":{"risk_tolerance":"moderate","investment_goal":"wealth_building"}}'"'"' >/dev/null; then' >> /app/docker-start.sh && \
    echo '    echo "✅ Database AI: 정상 작동"' >> /app/docker-start.sh && \
    echo 'else' >> /app/docker-start.sh && \
    echo '    echo "❌ Database AI: 오류"' >> /app/docker-start.sh && \
    echo 'fi' >> /app/docker-start.sh && \
    echo '' >> /app/docker-start.sh && \
    echo 'echo ""' >> /app/docker-start.sh && \
    echo 'echo "🎉 Rocky Linux Docker 배포 완료!"' >> /app/docker-start.sh && \
    echo 'echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"' >> /app/docker-start.sh && \
    echo 'echo "📱 접속 정보:"' >> /app/docker-start.sh && \
    echo 'echo "   • 웹앱: http://localhost:8080"' >> /app/docker-start.sh && \
    echo 'echo "   • Database AI: http://localhost:8003/database-ai/generate-strategy"' >> /app/docker-start.sh && \
    echo 'echo "   • API 문서: http://localhost:8003/docs"' >> /app/docker-start.sh && \
    echo 'echo ""' >> /app/docker-start.sh && \
    echo 'echo "✨ 특징: API 키 불필요, 318개 전문가 전략, 67-71% 신뢰도"' >> /app/docker-start.sh && \
    echo '' >> /app/docker-start.sh && \
    echo '# 프로세스 대기 (컨테이너 유지)' >> /app/docker-start.sh && \
    echo 'wait $BACKEND_PID $FRONTEND_PID' >> /app/docker-start.sh && \
    chmod +x /app/docker-start.sh

# 컨테이너 시작 명령
CMD ["/app/docker-start.sh"]